// Bible Verse Clock - Main Application Script

// Main Application Structure
document.addEventListener('DOMContentLoaded', initializeApp);

function initializeApp() {
    setupServiceWorker();
    createAppStructure();
    setupEventListeners();
    startClock();
    loadFavorites();
    displayVerseOfDay();
    
    // Show welcome message on first visit
    if (!localStorage.getItem('bibleClockFirstVisit')) {
        showWelcomeMessage();
        localStorage.setItem('bibleClockFirstVisit', 'true');
    }
}

// Setup Service Worker for PWA
function setupServiceWorker() {
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
            navigator.serviceWorker.register('./service-worker.js')
                .then(registration => {
                    console.log('ServiceWorker registration successful with scope: ', registration.scope);
                })
                .catch(error => {
                    console.log('ServiceWorker registration failed: ', error);
                });
        });
    }
}

// Create app structure
function createAppStructure() {
    const app = document.getElementById('app') || document.body;
    
    app.innerHTML = `
        <header>
            <h1>Bible Verse Clock</h1>
            <div class="clock" id="clock">00:00:00</div>
        </header>
        
        <main>
            <div class="verse-container">
                <div id="verseDisplay" class="verse"></div>
                <div id="verseOfDayDisplay" class="verse verse-of-day"></div>
                <div id="favoriteVerseDisplay" class="verse favorite-verse"></div>
                <div id="searchResultDisplay" class="verse search-result"></div>
            </div>
            
            <div class="control-panel">
                <button id="favoriteBtn">‚ù§ Favorite</button>
                <button id="shareBtn">Share</button>
                <button id="searchBtn">Search</button>
                <button id="categoriesBtn">Categories</button>
                <button id="devotionalBtn">Devotional</button>
            </div>
            
            <div id="searchPanel" class="search-panel">
                <input type="text" id="searchInput" placeholder="Search for verses...">
                <button id="closeSearchBtn">Close</button>
                <div id="searchResults"></div>
            </div>
            
            <div id="categoriesPanel" class="categories-panel">
                <h3>Categories</h3>
                <div class="category-buttons">
                    <button data-category="all" class="active">All</button>
                    <button data-category="faith">Faith</button>
                    <button data-category="love">Love</button>
                    <button data-category="peace">Peace</button>
                    <button data-category="encouragement">Encouragement</button>
                    <button data-category="wisdom">Wisdom</button>
                </div>
                <button id="closeCategoriesBtn">Close</button>
            </div>
        </main>
        
        <div id="favoritesPanel" class="favorites-panel">
            <h3>My Favorites</h3>
            <div id="favoritesList"></div>
            <button id="closeFavoritesBtn">Close</button>
        </div>
    `;
    
    // Add app styles
    const styleSheet = document.createElement('style');
    styleSheet.textContent = `
        :root {
            --primary-color: #3a5a78;
            --accent-color: #d2a860;
            --text-color: #333;
            --light-text: #777;
            --bg-color: #f8f9fa;
            --card-bg: #fff;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
        }
        
        header {
            background-color: var(--primary-color);
            color: white;
            padding: 1rem;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            margin: 0;
            font-size: 1.5rem;
        }
        
        .clock {
            font-size: 2rem;
            font-weight: bold;
            margin: 0.5rem 0;
        }
        
        main {
            padding: 1rem;
            max-width: 800px;
            margin: 0 auto;
        }
        
        .verse-container {
            background-color: var(--card-bg);
            border-radius: 8px;
            padding: 1.5rem;
            margin: 1rem 0;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            min-height: 150px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        
        .verse {
            font-size: 1.1rem;
            text-align: center;
            line-height: 1.8;
        }
        
        .verse-of-day {
            display: none;
            color: var(--accent-color);
            font-weight: 500;
        }
        
        .favorite-verse {
            display: none;
        }
        
        .search-result {
            display: none;
        }
        
        .control-panel {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin: 1rem 0;
        }
        
        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            font-family: inherit;
            font-size: 0.9rem;
            transition: background-color 0.2s;
        }
        
        button:hover {
            background-color: #2d4861;
        }
        
        button.active {
            background-color: var(--accent-color);
        }
        
        .search-panel {
            background-color: var(--card-bg);
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            display: none;
        }
        
        .search-panel input {
            width: 100%;
            padding: 0.7rem;
            margin-bottom: 1rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-family: inherit;
            font-size: 1rem;
        }
        
        .categories-panel {
            background-color: var(--card-bg);
            border-radius: 8px;
            padding: 1rem;
            margin: 1rem 0;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            display: none;
        }
        
        .category-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin: 1rem 0;
        }
        
        .favorites-panel {
            position: fixed;
            top: 0;
            left: -300px;
            width: 300px;
            height: 100vh;
            background-color: var(--card-bg);
            padding: 1.5rem;
            box-shadow: 2px 0 8px rgba(0, 0, 0, 0.2);
            overflow-y: auto;
            transition: left 0.3s ease;
            z-index: 900;
        }
        
        .favorites-panel.open {
            left: 0;
        }
        
        @media (max-width: 600px) {
            .control-panel {
                flex-direction: column;
            }
            
            .favorites-panel {
                width: 100%;
                left: -100%;
            }
        }

        /* Theme Toggle */
        .theme-toggle {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
        }

        /* Dark Theme */
        body.dark-theme {
            --primary-color: #1e3a5a;
            --accent-color: #ffc247;
            --text-color: #f0f0f0;
            --light-text: #aaa;
            --bg-color: #121212;
            --card-bg: #1e1e1e;
        }

        body.dark-theme .verse-container {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            transition: all 0.3s ease;
        }
        
        .modal-content {
            background-color: var(--card-bg);
            margin: 15% auto;
            padding: 2rem;
            border-radius: 10px;
            width: 80%;
            max-width: 600px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            position: relative;
            transition: all 0.3s ease;
            color: var(--text-color);
        }
        
        .close-button {
            position: absolute;
            top: 10px;
            right: 15px;
            color: var(--light-text);
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close-button:hover {
            color: var(--accent-color);
        }
    `;
    
    document.head.appendChild(styleSheet);
}

// Setup Event Listeners
function setupEventListeners() {
    // Favorite button
    document.getElementById('favoriteBtn').addEventListener('click', toggleFavorite);
    
    // Share button
    document.getElementById('shareBtn').addEventListener('click', shareVerse);
    
    // Search functionality
    document.getElementById('searchBtn').addEventListener('click', () => {
        document.getElementById('searchPanel').style.display = 'block';
    });
    
    document.getElementById('closeSearchBtn').addEventListener('click', () => {
        document.getElementById('searchPanel').style.display = 'none';
    });
    
    document.getElementById('searchInput').addEventListener('input', searchVerses);
    
    // Categories
    document.getElementById('categoriesBtn').addEventListener('click', () => {
        document.getElementById('categoriesPanel').style.display = 'block';
    });
    
    document.getElementById('closeCategoriesBtn').addEventListener('click', () => {
        document.getElementById('categoriesPanel').style.display = 'none';
    });
    
    document.querySelectorAll('.category-buttons button').forEach(button => {
        button.addEventListener('click', (e) => {
            // Remove active class from all buttons
            document.querySelectorAll('.category-buttons button').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Add active class to clicked button
            e.target.classList.add('active');
            
            // Filter verses by category
            filterByCategory(e.target.getAttribute('data-category'));
        });
    });
    
    // Devotional button
    document.getElementById('devotionalBtn').addEventListener('click', showDevotional);
    
    // Add Theme Toggle Button to Header
    const header = document.querySelector('header');
    const themeToggle = document.createElement('button');
    themeToggle.className = 'theme-toggle';
    themeToggle.innerHTML = 'üåô'; // Moon emoji for dark mode
    themeToggle.addEventListener('click', toggleTheme);
    header.appendChild(themeToggle);
    
    // Load saved theme preference
    if (localStorage.getItem('bibleClockTheme') === 'dark') {
        document.body.classList.add('dark-theme');
        themeToggle.innerHTML = '‚òÄÔ∏è'; // Sun emoji for light mode
    }
}

// Toggle between light and dark theme
function toggleTheme() {
    const themeToggle = document.querySelector('.theme-toggle');
    
    if (document.body.classList.contains('dark-theme')) {
        document.body.classList.remove('dark-theme');
        localStorage.setItem('bibleClockTheme', 'light');
        themeToggle.innerHTML = 'üåô';
    } else {
        document.body.classList.add('dark-theme');
        localStorage.setItem('bibleClockTheme', 'dark');
        themeToggle.innerHTML = '‚òÄÔ∏è';
    }
}

// Start the clock
function startClock() {
    updateClock();
    setInterval(updateClock, 1000);
}

// Update the clock display
function updateClock() {
    const now = new Date();
    const hours = now.getHours().toString().padStart(2, '0');
    const minutes = now.getMinutes().toString().padStart(2, '0');
    const seconds = now.getSeconds().toString().padStart(2, '0');
    
    document.getElementById('clock').textContent = `${hours}:${minutes}:${seconds}`;
    
    // Update verse every minute
    if (seconds === '00') {
        updateVerse(hours, minutes);
    }
}

// Update the verse based on time
function updateVerse(hours, minutes) {
    const timeKey = `${hours}:${minutes}`;
    
    // Try to find exact match
    let verse = verseCollection[timeKey];
    
    // If no exact match, try to find closest match
    if (!verse) {
        verse = getClosestVerse(timeKey);
    }
    
    // If category filter is active, apply it
    if (window.currentCategoryFilter) {
        let categoryMatches = false;
        
        // Look through all verses to find a match for both time and category
        for (const key in verseCollection) {
            const currentVerse = verseCollection[key];
            if (currentVerse.categories.includes(window.currentCategoryFilter)) {
                // Calculate time difference
                const [vHours, vMinutes] = key.split(':').map(Number);
                const [cHours, cMinutes] = timeKey.split(':').map(Number);
                
                const vTotalMinutes = vHours * 60 + vMinutes;
                const cTotalMinutes = cHours * 60 + cMinutes;
                
                const diff = Math.abs(vTotalMinutes - cTotalMinutes);
                
                // If it's within 30 minutes and matches category, use it
                if (diff <= 30) {
                    verse = currentVerse;
                    categoryMatches = true;
                    break;
                }
            }
        }
        
        // If no nearby verse matches the category, just use the original verse
        if (!categoryMatches) {
            verse = verseCollection[timeKey] || getClosestVerse(timeKey);
        }
    }
    
    const verseElement = document.getElementById('verseDisplay');
    verseElement.textContent = verse.text;
    verseElement.setAttribute('data-reference', verse.text.split(' - ')[0]);
    
    // Check if this verse is favorited
    updateFavoriteButtonState();
}

// Get closest verse if exact time not found
function getClosestVerse(timeString) {
    const [hours, minutes] = timeString.split(':').map(Number);
    const targetMinutes = hours * 60 + minutes;
    
    let closestVerse = null;
    let closestDistance = Infinity;
    
    for (const time in verseCollection) {
        const [verseHours, verseMinutes] = time.split(':').map(Number);
        const verseMinutesTotal = verseHours * 60 + verseMinutes;
        const distance = Math.abs(verseMinutesTotal - targetMinutes);
        
        if (distance < closestDistance) {
            closestDistance = distance;
            closestVerse = verse
