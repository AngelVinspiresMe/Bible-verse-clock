// Update favorites list if visible
    if (document.querySelector('.favorites-panel.open')) {
        displayFavorites();
    }
    
    // Trigger sync if online
    if (navigator.onLine && 'serviceWorker' in navigator && navigator.serviceWorker.controller) {
        navigator.serviceWorker.ready.then(registration => {
            registration.sync.register('sync-favorites');
        });
    }
}

// Update favorite button state based on current verse
function updateFavoriteButtonState() {
    let verseElement = document.getElementById('verseDisplay');
    
    // Check which verse is currently visible
    if (verseElement.style.display === 'none') {
        if (document.getElementById('favoriteVerseDisplay').style.display !== 'none') {
            verseElement = document.getElementById('favoriteVerseDisplay');
        } else if (document.getElementById('searchResultDisplay').style.display !== 'none') {
            verseElement = document.getElementById('searchResultDisplay');
        } else if (document.getElementById('verseOfDayDisplay').style.display !== 'none') {
            verseElement = document.getElementById('verseOfDayDisplay');
        }
    }
    
    const verseText = verseElement.textContent.replace('Verse of the Day: ', '');
    const favoriteBtn = document.getElementById('favoriteBtn');
    
    // Get existing favorites
    const favorites = JSON.parse(localStorage.getItem('bibleClockFavorites') || '[]');
    
    // Check if current verse is favorited
    const isFavorite = favorites.some(fav => fav.text === verseText);
    
    // Update button appearance
    if (isFavorite) {
        favoriteBtn.innerHTML = '❤ Favorited';
        favoriteBtn.classList.add('active');
    } else {
        favoriteBtn.innerHTML = '❤ Favorite';
        favoriteBtn.classList.remove('active');
    }
}

// Load and display favorites
function loadFavorites() {
    // Add favorites button to control panel if not already there
    if (!document.getElementById('favoritesListBtn')) {
        const favoritesBtn = document.createElement('button');
        favoritesBtn.id = 'favoritesListBtn';
        favoritesBtn.textContent = 'My Favorites';
        favoritesBtn.addEventListener('click', () => {
            document.getElementById('favoritesPanel').classList.add('open');
            displayFavorites();
        });
        
        document.querySelector('.control-panel').appendChild(favoritesBtn);
    }
    
    // Add close button event listener
    document.getElementById('closeFavoritesBtn').addEventListener('click', () => {
        document.getElementById('favoritesPanel').classList.remove('open');
    });
}

// Display favorites in the panel
function displayFavorites() {
    const favoritesList = document.getElementById('favoritesList');
    const favorites = JSON.parse(localStorage.getItem('bibleClockFavorites') || '[]');
    
    if (favorites.length === 0) {
        favoritesList.innerHTML = '<p>No favorites yet. Add some by clicking the ❤ button.</p>';
        return;
    }
    
    // Sort favorites by newest first
    favorites.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    // Create HTML for favorites
    favoritesList.innerHTML = '';
    favorites.forEach(favorite => {
        const favoriteItem = document.createElement('div');
        favoriteItem.className = 'favorite-item';
        
        const reference = favorite.reference || favorite.text.split(' - ')[0];
        const verseText = favorite.text.split(' - ')[1] || favorite.text;
        
        favoriteItem.innerHTML = `
            <div class="favorite-reference">${reference}</div>
            <div class="favorite-text">${verseText}</div>
            <div class="favorite-actions">
                <button class="display-favorite" data-verse="${favorite.text}">Display</button>
                <button class="remove-favorite" data-verse="${favorite.text}">Remove</button>
            </div>
        `;
        
        favoritesList.appendChild(favoriteItem);
    });
    
    // Add styles for favorites
    if (!document.getElementById('favorites-styles')) {
        const favoritesStyles = document.createElement('style');
        favoritesStyles.id = 'favorites-styles';
        favoritesStyles.textContent = `
            .favorite-item {
                margin-bottom: 1rem;
                padding-bottom: 1rem;
                border-bottom: 1px solid #eee;
            }
            
            .favorite-reference {
                font-weight: bold;
                color: var(--primary-color);
            }
            
            .favorite-text {
                margin: 0.5rem 0;
            }
            
            .favorite-actions {
                display: flex;
                gap: 0.5rem;
            }
            
            .favorite-actions button {
                padding: 0.3rem 0.6rem;
                font-size: 0.8rem;
            }
            
            .display-favorite {
                background-color: var(--primary-color);
            }
            
            .remove-favorite {
                background-color: #e74c3c;
            }
        `;
        
        document.head.appendChild(favoritesStyles);
    }
    
    // Add event listeners for favorite actions
    document.querySelectorAll('.display-favorite').forEach(button => {
        button.addEventListener('click', (e) => {
            const verseText = e.target.getAttribute('data-verse');
            displayFavoriteVerse(verseText);
            document.getElementById('favoritesPanel').classList.remove('open');
        });
    });
    
    document.querySelectorAll('.remove-favorite').forEach(button => {
        button.addEventListener('click', (e) => {
            const verseText = e.target.getAttribute('data-verse');
            removeFavorite(verseText);
        });
    });
}

// Display a favorite verse
function displayFavoriteVerse(verseText) {
    const currentVerseElement = document.getElementById('verseDisplay');
    const favoriteVerseElement = document.getElementById('favoriteVerseDisplay');
    
    // Hide current verse
    currentVerseElement.style.display = 'none';
    
    // Display favorite verse
    favoriteVerseElement.textContent = verseText;
    favoriteVerseElement.style.display = 'block';
    
    // Set data attribute for favorite button functionality
    favoriteVerseElement.setAttribute('data-reference', verseText.split(' - ')[0]);
    
    // Update favorite button state
    updateFavoriteButtonState();
    
    // Show toast
    showToast('Displaying favorite verse');
    
    // Return to current verse after 30 seconds
    setTimeout(() => {
        favoriteVerseElement.style.display = 'none';
        currentVerseElement.style.display = 'block';
        updateFavoriteButtonState();
    }, 30000);
}

// Remove a verse from favorites
function removeFavorite(verseText) {
    let favorites = JSON.parse(localStorage.getItem('bibleClockFavorites') || '[]');
    
    // Remove from favorites
    favorites = favorites.filter(fav => fav.text !== verseText);
    
    // Save updated favorites
    localStorage.setItem('bibleClockFavorites', JSON.stringify(favorites));
    
    // Update display
    displayFavorites();
    updateFavoriteButtonState();
    
    // Show toast
    showToast('Removed from favorites');
}

// Share current verse
function shareVerse() {
    // Determine which verse is currently visible
    let verseText;
    
    if (document.getElementById('verseDisplay').style.display !== 'none') {
        verseText = document.getElementById('verseDisplay').textContent;
    } else if (document.getElementById('favoriteVerseDisplay').style.display !== 'none') {
        verseText = document.getElementById('favoriteVerseDisplay').textContent;
    } else if (document.getElementById('searchResultDisplay').style.display !== 'none') {
        verseText = document.getElementById('searchResultDisplay').textContent;
    } else if (document.getElementById('verseOfDayDisplay').style.display !== 'none') {
        verseText = document.getElementById('verseOfDayDisplay').textContent.replace('Verse of the Day: ', '');
    } else {
        showToast('No verse to share');
        return;
    }
    
    // Use Web Share API if available
    if (navigator.share) {
        navigator.share({
            title: 'Bible Verse Clock',
            text: verseText,
            url: window.location.href
        })
        .then(() => showToast('Shared successfully'))
        .catch(error => {
            console.error('Error sharing:', error);
            fallbackShare(verseText);
        });
    } else {
        fallbackShare(verseText);
    }
}

// Fallback share method
function fallbackShare(text) {
    // Create a textarea, copy text to clipboard
    const textarea = document.createElement('textarea');
    textarea.value = text;
    textarea.style.position = 'fixed'; // Avoid scrolling to bottom
    document.body.appendChild(textarea);
    textarea.focus();
    textarea.select();
    
    try {
        document.execCommand('copy');
        showToast('Verse copied to clipboard');
    } catch (err) {
        console.error('Failed to copy verse:', err);
        showToast('Unable to copy verse');
    }
    
    document.body.removeChild(textarea);
}

// Search verses
function searchVerses() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const searchResults = document.getElementById('searchResults');
    
    // Clear previous results
    searchResults.innerHTML = '';
    
    if (searchTerm.length < 2) {
        return;
    }
    
    // Search in verse collection
    let resultsFound = 0;
    for (const timeKey in verseCollection) {
        const verse = verseCollection[timeKey];
        const verseText = verse.text.toLowerCase();
        
        // If verse text or categories contain search term
        if (verseText.includes(searchTerm) || verse.categories.some(cat => cat.includes(searchTerm))) {
            const resultItem = document.createElement('div');
            resultItem.className = 'search-result-item';
            
            // Extract reference from verse text
            const reference = verse.text.split(' - ')[0];
            
            resultItem.innerHTML = `
                <div class="search-reference">${reference} (${timeKey})</div>
                <div class="search-text">${verse.text.split(' - ')[1]}</div>
                <button class="view-result" data-verse="${verse.text}" data-time="${timeKey}">View</button>
            `;
            
            searchResults.appendChild(resultItem);
            resultsFound++;
            
            // Limit results to avoid overwhelming the UI
            if (resultsFound >= 10) {
                break;
            }
        }
    }
    
    // Show message if no results found
    if (resultsFound === 0) {
        searchResults.innerHTML = '<p>No verses found matching your search.</p>';
    } else {
        // Add styles for search results
        if (!document.getElementById('search-styles')) {
            const searchStyles = document.createElement('style');
            searchStyles.id = 'search-styles';
            searchStyles.textContent = `
                .search-result-item {
                    margin-bottom: 1rem;
                    padding-bottom: 1rem;
                    border-bottom: 1px solid #eee;
                }
                
                .search-reference {
                    font-weight: bold;
                    color: var(--primary-color);
                }
                
                .search-text {
                    margin: 0.5rem 0;
                }
                
                .view-result {
                    background-color: var(--accent-color);
                    padding: 0.3rem 0.6rem;
                    font-size: 0.8rem;
                }
            `;
            
            document.head.appendChild(searchStyles);
        }
        
        // Add event listeners for view buttons
        document.querySelectorAll('.view-result').forEach(button => {
            button.addEventListener('click', (e) => {
                const verseText = e.target.getAttribute('data-verse');
                displaySearchResult(verseText);
                document.getElementById('searchPanel').style.display = 'none';
            });
        });
    }
}
