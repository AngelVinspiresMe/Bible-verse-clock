// Display search result
function displaySearchResult(verseText) {
    const currentVerseElement = document.getElementById('verseDisplay');
    const searchResultElement = document.getElementById('searchResultDisplay');
    
    // Hide current verse
    currentVerseElement.style.display = 'none';
    
    // Display search result
    searchResultElement.textContent = verseText;
    searchResultElement.style.display = 'block';
    
    // Set data attribute for favorite button functionality
    searchResultElement.setAttribute('data-reference', verseText.split(' - ')[0]);
    
    // Update favorite button state
    updateFavoriteButtonState();
    
    // Show toast
    showToast('Displaying search result');
    
    // Add close button
    if (!document.getElementById('closeSearchResultBtn')) {
        const closeBtn = document.createElement('button');
        closeBtn.id = 'closeSearchResultBtn';
        closeBtn.textContent = 'Return to Current Verse';
        closeBtn.className = 'close-search-result-btn';
        closeBtn.addEventListener('click', () => {
            searchResultElement.style.display = 'none';
            currentVerseElement.style.display = 'block';
            document.body.removeChild(closeBtn);
            updateFavoriteButtonState();
        });
        
        // Add styles for button
        const btnStyle = document.createElement('style');
        btnStyle.textContent = `
            .close-search-result-btn {
                position: fixed;
                bottom: 1rem;
                left: 50%;
                transform: translateX(-50%);
                background-color: var(--primary-color);
                color: white;
                border: none;
                padding: 0.75rem 1.5rem;
                border-radius: 4px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
                z-index: 100;
            }
        `;
        document.head.appendChild(btnStyle);
        
        document.body.appendChild(closeBtn);
    }
}

// Filter verses by category
function filterByCategory(category) {
    // Note: since we're not showing a list of verses but rather time-based verses,
    // we'll need to implement category filtering differently.
    
    // For this implementation, we'll set a global filter for the updateVerse function
    window.currentCategoryFilter = category === 'all' ? null : category;
    
    // Update the current verse based on the filter
    const now = new Date();
    const hours = now.getHours().toString().padStart(2, '0');
    const minutes = now.getMinutes().toString().padStart(2, '0');
    updateVerse(hours, minutes);
    
    // Show toast about filtering
    showToast(category === 'all' ? 'Showing all verses' : `Filtering by "${category}"`);
    
    // Hide categories panel
    document.getElementById('categoriesPanel').style.display = 'none';
}

// Show devotional for current verse
function showDevotional() {
    // Determine which verse is currently visible
    let verseToUse;
    
    if (document.getElementById('verseOfDayDisplay').style.display !== 'none') {
        verseToUse = document.getElementById('verseOfDayDisplay').textContent.replace('Verse of the Day: ', '');
    } else if (document.getElementById('verseDisplay').style.display !== 'none') {
        verseToUse = document.getElementById('verseDisplay').textContent;
    } else if (document.getElementById('favoriteVerseDisplay').style.display !== 'none') {
        verseToUse = document.getElementById('favoriteVerseDisplay').textContent;
    } else if (document.getElementById('searchResultDisplay').style.display !== 'none') {
        verseToUse = document.getElementById('searchResultDisplay').textContent;
    } else {
        const now = new Date();
        const timeKey = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
        verseToUse = verseCollection[timeKey]?.text || getClosestVerse(timeKey).text;
    }
    
    const devotional = getDevotionalForVerse(verseToUse);
    
    // Create devotional modal
    const devotionalModal = document.createElement('div');
    devotionalModal.className = 'modal';
    devotionalModal.innerHTML = `
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2>${devotional.title}</h2>
            <p class="verse-text">${verseToUse}</p>
            <div class="devotional-content">
                ${devotional.content}
            </div>
            <div class="devotional-prayer">
                <h3>Prayer Focus</h3>
                <p>Take a moment to pray about how you can apply this verse in your life today.</p>
            </div>
        </div>
    `;
    
    document.body.appendChild(devotionalModal);
    
    // Show the modal
    setTimeout(() => {
        devotionalModal.style.display = "block";
    }, 100);
    
    // Close button functionality
    const closeButton = devotionalModal.querySelector(".close-button");
    closeButton.onclick = function() {
        devotionalModal.style.display = "none";
        setTimeout(() => {
            document.body.removeChild(devotionalModal);
        }, 300);
    };
    
    // Close when clicking outside
    window.onclick = function(event) {
        if (event.target === devotionalModal) {
            devotionalModal.style.display = "none";
            setTimeout(() => {
                document.body.removeChild(devotionalModal);
            }, 300);
        }
    };
    
    // Add styles for devotional
    const styleSheet = document.createElement("style");
    styleSheet.textContent = `
        .devotional-content {
            margin: 1.5rem 0;
            line-height: 1.6;
            color: var(--text-color);
        }
        
        .devotional-prayer {
            background-color: #f8f8f8;
            padding: 1rem;
            border-radius: 5px;
            margin-top: 1.5rem;
        }
        
        .verse-text {
            font-style: italic;
            margin: 1rem 0;
            padding: 0.75rem;
            background-color: rgba(0, 0, 0, 0.05);
            border-radius: 4px;
            border-left: 3px solid var(--accent-color);
        }
        
        body.dark-theme .devotional-prayer {
            background-color: #2c2c2c;
        }
        
        @media (max-width: 600px) {
            .modal-content {
                margin: 20% auto;
                width: 90%;
                padding: 1.5rem;
            }
        }
    `;

    document.head.appendChild(styleSheet);
}

// Show welcome message on first visit
function showWelcomeMessage() {
    // Create welcome modal
    const welcomeModal = document.createElement('div');
    welcomeModal.className = 'modal welcome-modal';
    welcomeModal.innerHTML = `
        <div class="modal-content">
            <h2>Welcome to Bible Verse Clock!</h2>
            <p>This app shows you a Bible verse based on the current time.</p>
            <ul>
                <li>Each time corresponds to a meaningful verse</li>
                <li>Save your favorite verses</li>
                <li>Search for specific verses</li>
                <li>Filter by categories</li>
                <li>Read daily devotionals</li>
                <li>Works offline</li>
            </ul>
            <p>May God's Word bring light to your day!</p>
            <button class="welcome-close-btn">Get Started</button>
        </div>
    `;
    
    document.body.appendChild(welcomeModal);
    
    // Add styles for welcome modal
    const welcomeStyles = document.createElement('style');
    welcomeStyles.textContent = `
        .welcome-modal {
            display: flex;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            align-items: center;
            justify-content: center;
        }
        
        .welcome-modal .modal-content {
            background-color: var(--card-bg);
            padding: 2rem;
            border-radius: 8px;
            max-width: 500px;
            width: 90%;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        
        .welcome-modal h2 {
            color: var(--primary-color);
            margin-top: 0;
        }
        
        .welcome-modal ul {
            text-align: left;
            margin: 1.5rem 0;
            padding-left: 1.5rem;
        }
        
        .welcome-modal li {
            margin-bottom: 0.5rem;
        }
        
        .welcome-close-btn {
            background-color: var(--accent-color);
            padding: 0.75rem 2rem;
            margin-top: 1rem;
            font-size: 1rem;
        }
    `;
    
    document.head.appendChild(welcomeStyles);
    
    // Close button functionality
    const closeButton = welcomeModal.querySelector('.welcome-close-btn');
    closeButton.onclick = function() {
        welcomeModal.style.display = 'none';
        setTimeout(() => {
            document.body.removeChild(welcomeModal);
        }, 300);
    };
}

// Show toast message
function showToast(message) {
    // Remove existing toast if present
    const existingToast = document.querySelector('.toast');
    if (existingToast) {
        document.body.removeChild(existingToast);
    }
    
    // Create toast element
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.textContent = message;
    
    // Add toast styles if not already added
    if (!document.getElementById('toast-styles')) {
        const toastStyles = document.createElement('style');
        toastStyles.id = 'toast-styles';
        toastStyles.textContent = `
            .toast {
                position: fixed;
                bottom: 2rem;
                left: 50%;
                transform: translateX(-50%);
                background-color: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 0.75rem 1.5rem;
                border-radius: 4px;
                font-size: 0.9rem;
                z-index: 1000;
                animation: fadeInOut 3s ease forwards;
            }
            
            @keyframes fadeInOut {
                0% { opacity: 0; transform: translate(-50%, 20px); }
                10% { opacity: 1; transform: translate(-50%, 0); }
                90% { opacity: 1; transform: translate(-50%, 0); }
                100% { opacity: 0; transform: translate(-50%, -20px); }
            }
        `;
        
        document.head.appendChild(toastStyles);
    }
    
    // Add to DOM
    document.body.appendChild(toast);
    
    // Remove after animation
    setTimeout(() => {
        if (document.body.contains(toast)) {
            document.body.removeChild(toast);
        }
    }, 3000);
}

// Initialize features when document is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Enable dark theme if it's night time (after 6 PM or before 6 AM)
    const currentHour = new Date().getHours();
    if ((currentHour >= 18 || currentHour < 6) && !localStorage.getItem('bibleClockTheme')) {
        document.body.classList.add('dark-theme');
        localStorage.setItem('bibleClockTheme', 'dark');
    }
});
